Some question and keynote about override
----------------------------------------------------
package equals;

public class Test2 {
	public static void main(String[] args) {
		lisa o1 = new lisa(3,7);
		lisa o2 = new lisa(3,7);
		System.out.println(o1.equals(o2));
	}

}

class lisa{
	public int x;
	public int y;
	
	public lisa(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

--------------------------------
Print: false.

Q：为什么比较的都是内容了 还是false？ 
A：因为lisa是自己定义的类，自己定义的类没有 equals()这个method。这个equals是从 Object继承过来的，他的default implementation比较的是地址，而不是内容。

Q： 想让他相同怎么办？
A：自己implement一个 equals，重写这个equals 得到的就是true

-----------------------------以下内容放在 class lisa 里面， 和public lisa（）方法并列------------------------------------
        @Override
	public boolean equals(Object other) {
		if(!(other instanceof lisa)) { // 如果other根本就不是lisa这个类型 就没必要比了
			return false;
		}
		lisa o = (lisa) other; //否则把other cast成lisa 
		return x == o.x && y == o.y; //because we want to compare 内容, 所以我们比较x和y两个参数是否相等so let the arguments compared.
		
	}
-----------------------------------------------------------------------
Print：True

Q: 为什么要Cast？
A： other作为一个Object是没有.x .y的，只有把他初始化成lisa之后 才有这个属性
------------------------------------------------------------------------

关于HashCode没有重写的后果

public class Test2 {
	public static void main(String[] args) {
		lisa o1 = new lisa(3,7);
		lisa o2 = new lisa(3,7);
		
	}
	
	Map<lisa, Integer> map = new HashMap<>();
	map.put(o1,1);
	map.put(o2,3);
	System.out.println(map.size());

}

Print 1 or 2?? what is the map size?
Print 2. 
-----------------
Q: Why the o2 has the same key as o1,but not overlap不覆盖 the o1?
A: because HashCode function didn't be override, o1 and o2 on different address.

The process 我们往hashmap里push一个数的过程 是：
1. 算hash value
2. 算bucket
3. iterate the list find if there is same key， if so， 

if 他们的key相同 但是hashcode不同（地址不同），so算出的hash value不同，继而bucket不同，所以找不到o1了。
如果要达成覆盖，必须自己implement override HashCode


public class Test2 {
	public static void main(String[] args) {
		lisa o1 = new lisa(3,7);
		lisa o2 = new lisa(3,7);
		
	}
	
	Map<lisa, Integer> map = new HashMap<>();
	map.put(o1,1);
	map.put(o2,3);
	System.out.println(map.size());
	
	@Override
	public int hashCode(){
	
	return 31*x+y; // kx + y =kx2 + y2
	
	}

}

----------
Print: 1


